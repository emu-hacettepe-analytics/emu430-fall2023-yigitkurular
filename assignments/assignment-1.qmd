---
title: "Assignment 1"
---

My first assignment has three parts.

## a) Discussion on "**Quarto for the Curious"**

[The video](https://posit.co/talks/quarto-for-rmarkdown-users/) discusses Quarto. Quarto is a next-generation version of RMarkdown which built on Pandoc. It is a powerful scientific and technical publishing system that allows users to render documents to HTML, PDF, or websites. It extends beyond R to include Jupyter and Jupyter Kernels, allowing for collaboration with other programming languages. Quarto is included in RStudio which makes it easier for users to access and begin using it. It also supports Jupyter and Jupyter Kernels, that allows interaction with other programming languages. Quarto is included in RStudio which makes it easier for users to access and use it.

The speaker discusses the advantages of use Quarto for writing different kinds of documents such as books, blogs, and webpages. Quarto also comes with a variety of formats and advanced layouts like distill. Users may continue working on shared documents in the comfort of their own workstation.

Quarto also can works with JavaScript libraries that add interactivity to R documents. It combines the syntax of several formats like HTML, PDF, R, Markdown etc. Also with Quarto, users can create and interact with different tags, filter data, and generate documents in various formats without install another software.

Finally, the speaker talks about how Quarto was developed and how it relates to RMarkdown. Quarto is a new platform which was created by same team with RMarkdown. The fact that RMarkdown will continue, but new features will be built into Quarto.

## b) Differences between R and Python

### Indexing Elements

One of the main difference between these two popular languages is indexing the elements. R uses 1 as base index number, but in python indexing starts with 0.

For example:

```{r}
# In R
a <- c(4, 5, 6, 7)
first_a <- a[1]
second_a <- a[2]
print(first_a)
print(second_a)
```

```{python}
# In Python
b = [4, 5, 6, 7]
first_b = b[0]
second_b = b[1]
print(first_b)
print(second_b)
```

## Syntax Differences

One of the other difference is syntax. For example, to assign an element in R we use "\<-" but, in Python it is "=".

```{R}
a <- 1
b <- 2
summation <- a + b
print(summation)
```

```{python}
x = 2 
y = 3
summation = x + y
print(summation)
```

## Creating Data Frame

R has special data structures like factors and data frames, but in python data structures differs like lists, dictionaries and pandas data frames.

```{r}
Turkish_cities <- data.frame(
                            city_name = c("Izmir", "Istanbul", "Ankara"),
                            city_population = c("4.300.000", "16.000.000", "5.700.000")
                            )
print(Turkish_cities)
```

```{python}
import pandas as pd 
turkish_cities= [["IzmÄ±r", "4.300.000"], ["Istanbul", "16.000.000"], ["Ankara", "5.700.000"]]
df_turkish_cities= pd.DataFrame(turkish_cities,columns= ["city_name", "city_population"])
print(df_turkish_cities)
```

## c) NA Values

Our main dataset with NA values is:

```{r}
library("dslabs")
data(na_example)
print(na_example)
```

and the number of NA values is:

```{r}
library("dslabs")
data(na_example)
total_NA_Value <- sum(is.na(na_example))
print(total_NA_Value)
```

Our new dataset without NA values is:

```{r}
library("dslabs")
data("na_example")
non_NA_Dataframe <- na_example
non_NA_Dataframe[is.na(na_example)] <- 0
print(non_NA_Dataframe)

```

and the number of NA values is:

```{r}
library("dslabs")
data("na_example")
non_NA_Dataframe <- na_example
non_NA_Dataframe[is.na(na_example)] <- 0
total_NA_Value <- sum(is.na(non_NA_Dataframe))
print(total_NA_Value)
```
