---
title: "Assignment 1"
---

# Assignment 1

My first assignment has three parts.

## b) Differences between R and Python

### Indexing Elements

One of the main difference between these two popular languages is indexing the elements. R uses 1 as base index number, but in python indexing starts with 0.

For example:

```{r}
# In R
a <- c(4, 5, 6, 7)
first_a <- a[1]
second_a <- a[2]
print(first_a)
print(second_a)
```

```{python}
# In Python
b = [4, 5, 6, 7]
first_b = b[0]
second_b = b[1]
print(first_b)
print(second_b)
```

## Syntax Differences

One of the other difference is syntax. For example, to assign an element in R we use "\<-" but, in Python it is "=".

```{R}
a <- 1
b <- 2
summation <- a + b
print(summation)
```

```{python}
x = 2 
y = 3
summation = x + y
print(summation)
```

## Creating Data Frame

R has special data structures like factors and data frames, but in python data structures differs like lists, dictionaries and pandas data frames.

```{r}
Turkish_cities <- data.frame(
                            city_name = c("Izmir", "Istanbul", "Ankara"),
                            city_population = c("4.300.000", "16.000.000", "5.700.000")
                            )
print(Turkish_cities)
```

```{python}
import pandas as pd 
turkish_cities= [["IzmÄ±r", "4.300.000"], ["Istanbul", "16.000.000"], ["Ankara", "5.700.000"]]
df_turkish_cities= pd.DataFrame(turkish_cities,columns= ["city_name", "city_population"])
print(df_turkish_cities)
```

## c) NA Values

Our main dataset with NA values is:

```{r}
library("dslabs")
data(na_example)
print(na_example)
```

and the number of NA values is:

```{r}
library("dslabs")
data(na_example)
total_NA_Value <- sum(is.na(na_example))
print(total_NA_Value)
```

Our new dataset without NA values is:

```{r}
library("dslabs")
data("na_example")
non_NA_Dataframe <- na_example
non_NA_Dataframe[is.na(na_example)] <- 0
print(non_NA_Dataframe)

```

and the number of NA values is:

```{r}
library("dslabs")
data("na_example")
non_NA_Dataframe <- na_example
non_NA_Dataframe[is.na(na_example)] <- 0
total_NA_Value <- sum(is.na(non_NA_Dataframe))
print(total_NA_Value)
```
