[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "Our Course Project",
    "section": "",
    "text": "I’m honored to be a member of the [group name] project team.\nBelow, you’ll find a brief summary of our project. To access a detailed project description, please go to https://[your-project-url].\nSummary\n[provide a biref summary of your project]\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome to My Analytics Lab!",
    "section": "",
    "text": "Hello! My name is Recai Yiğit Kurular.\nThis is my personal webpage.\nPlease stay tuned to follow my works on data analytics, blog posts, and more.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-2.html",
    "href": "assignments/assignment-2.html",
    "title": "Assignment 2",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nurl_1 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\" \nurl_2 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nsum_url &lt;- c(url_1, url_2)\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\n\nurl_1 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\" \nurl_2 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nsum_url &lt;- c(url_1, url_2)\n\ntitle &lt;- c()\nyear &lt;- c()\nduration &lt;- c()\nrating &lt;- c()\nvote &lt;- c()\n\nfor (url in sum_url) {\n  page &lt;- read_html(url)\n  \n  # To extract names\n  title_names &lt;- page %&gt;% html_nodes('.ipc-title__text') %&gt;% html_text()\n  title_names &lt;- tail(head(title_names, -1), -1)\n  title_names &lt;- str_split(title_names, \" \", n = 2)\n  title_names &lt;- unlist(lapply(title_names, function(x) { x[2] }))\n  title &lt;- append(title, title_names)\n  \n  # To extract years\n  years &lt;- page %&gt;% html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata') %&gt;% html_text() %&gt;% str_extract(\"\\\\d{4}\") %&gt;% as.numeric()\n  year &lt;- append(year, years)\n  \n  # To convert durations \n  convert_duration_to_minutes &lt;- function(duration_string) {\n    \n    hours &lt;- as.numeric(str_extract(duration_string, \"\\\\d+\\\\s?h\"))\n    minutes &lt;- as.numeric(str_extract(duration_string, \"\\\\d+\\\\s?m\"))\n    seconds &lt;- as.numeric(str_extract(duration_string, \"\\\\d+\\\\s?s\"))\n    \n    \n    hours &lt;- ifelse(is.na(hours), 0, hours)\n    minutes &lt;- ifelse(is.na(minutes), 0, minutes)\n    seconds &lt;- ifelse(is.na(seconds), 0, seconds)\n    \n    \n    total_minutes &lt;- hours * 60 + minutes + seconds / 60\n    \n    return(total_minutes)\n  }\n  # To extract durations\n  durations &lt;- page %&gt;% html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata') %&gt;% html_text()\n  \n  convert_to_minutes &lt;- function(duration) {\n    hours &lt;- as.numeric(str_extract(duration, \"\\\\d+(?=h)\"))\n    minutes &lt;- as.numeric(str_extract(duration, \"\\\\d+(?=m)\"))\n    \n    \n    hours &lt;- ifelse(is.na(hours), 0, hours)\n    minutes &lt;- ifelse(is.na(minutes), 0, minutes)\n    \n    total_minutes &lt;- hours * 60 + minutes\n    return(total_minutes)\n  }\n  \n  durations_in_minutes &lt;- lapply(durations, function(d) {\n    d &lt;- str_extract(d, \"\\\\d+h( \\\\d+m)?|\\\\d+m|\\\\d+\") %&gt;% str_extract(\"(?&lt;=^.{4}).*\")\n    convert_to_minutes(d)\n  })\n  \n  durations &lt;- unlist(durations_in_minutes)\n  duration &lt;- append(duration, durations)\n  \n  # To extract ratings\n  ratings &lt;- page %&gt;% html_nodes(\".sc-43986a27-1.fVmjht\") %&gt;% html_text() %&gt;% str_sub(1, 3) %&gt;% as.numeric()\n  rating &lt;- append(rating, ratings)\n  \n  # To extract votes\n  votes &lt;- page %&gt;% html_nodes(\".sc-53c98e73-0.kRnqtn\") %&gt;% html_text() %&gt;% str_extract_all(\"\\\\d+\") %&gt;% sapply(function(x) as.numeric(paste(x, collapse = \"\")))\n  vote &lt;- append(vote, votes)\n  \n}\n\nmovies_df &lt;- data.frame(title, year, duration, rating, vote)\nhead(movies_df)\n\n                     title year duration rating  vote\n1        Kuru Otlar Üstüne 2023      197    8.1  5088\n2  Istanbul Için Son Çagri 2023       91    5.3  7393\n3 Yedinci Kogustaki Mucize 2019      132    8.2 54171\n4           Ölümlü Dünya 2 2023      117    7.5  3484\n5                   Bihter 2023      113    3.6  3356\n6             Ölümlü Dünya 2018      107    7.6 30270\n\n\n\n\n\n\nmovies_df &lt;- movies_df[order(-movies_df$rating), ]\nbest_5_movies &lt;- head(movies_df, 5)\nprint(\"Best 5 Movies:\")\n\n[1] \"Best 5 Movies:\"\n\nprint(best_5_movies)\n\n                           title year duration rating  vote\n257               Hababam Sinifi 1975       87    9.2 42512\n39        CM101MMXI Fundamentals 2013      139    9.1 46996\n273                   Tosun Pasa 1976       90    8.9 24329\n337 Hababam Sinifi Sinifta Kaldi 1975       95    8.9 24369\n321                Süt Kardesler 1976       80    8.8 20889\n\n\nI think it would be disrespectful to criticize that movies. Each of them starred cult actors and actresses who have contributed to Turkish cinema for years. Maybe the only comment we can make is the type of second “movie”. As you know, it’s not a movie, it’s recorded stand-up show, but of course it does not doesn’t change the fact that it is one of the best examples of its kind.\n\nmovies_df &lt;- movies_df[order(-movies_df$rating), ]\nworst_5_movies &lt;- tail(movies_df, 5)\nprint(\"Worst 5 Movies:\")\n\n[1] \"Worst 5 Movies:\"\n\nprint(worst_5_movies)\n\n                             title year duration rating  vote\n189                 Cumali Ceber 2 2018      100    1.2 10230\n199                          Müjde 2022       48    1.2  9919\n245              15/07 Safak Vakti 2021       95    1.2 20608\n101 Cumali Ceber: Allah Seni Alsin 2017      100    1.0 39269\n150                           Reis 2017      108    1.0 73974\n\n\nActually, I do not have a specific comment for that movies. Especially for some of them. I don’t want to get in trouble :D\n\nmovies_df %&gt;% filter(title == \"Aile Arasinda\" | title == \"Babam ve Oglum\" | title == \"G.O.R.A.\" | title == \"Pek Yakinda\" | title == \"Beyaz Melek\") %&gt;% arrange(desc(rating))\n\n           title year duration rating  vote\n1 Babam ve Oglum 2005      108    8.2 91035\n2       G.O.R.A. 2004      127    8.0 66033\n3  Aile Arasinda 2017      124    7.6 25666\n4    Pek Yakinda 2014      134    7.3 35455\n5    Beyaz Melek 2007      115    6.5  7338\n\n\nSince I had to choose 5 movies, these are the first ones that come to my mind. I cannot say that they’re my favorites. To comment: Babam ve Oglum is a really emotional movie, as you know. I cryevery time I watched it, especially in one scene. You know that scene… If I need to comment about the Aile Arasinda: As a person who watched everything produced by Gulse Birsel, it is a comedy movie that I love very much. Finally, Beyaz Melek is a movie I watched in my childhood and I think a child should not watch it. It can cause a kind of trauma. Fortunatelly, it didn’t happen to me.\n\n\n\nmovie_count_by_year &lt;- movies_df %&gt;%\n  group_by(year) %&gt;%\n  summarise(count = n())\n\nggplot(movie_count_by_year, aes(x = year, y = count)) + geom_point(size = 1) + labs(title = \"Number of Movies by Year\", x = \"Year\", y = \"Number of Movies\") \n\n\n\n\nAs you can see, number of movies produces significantly increased in last 20 years. Some of the reasons for this may be competition in the sector, digitalization and globalization in the media.\n\n\n\n\nratings_by_year &lt;- movies_df %&gt;% group_by(year) %&gt;% summarise(average_rating = mean(rating))\n\nggplot(ratings_by_year, aes(x = year, y = average_rating)) + geom_point(size = 1) + labs(title = \"Average Ratings by Year\", x = \"Year\", y = \"Average Rating\")\n\n\n\n\nAs you can see, we are facing with an interesting result. I just mentioned that the number of movies by years increased, and we talked about some reasons for that. In this graph, we also can see some results of that reasons. The increasing number of movies have clearly reduced the ratings.\n\n\n\n\nggplot(movies_df, aes(x = vote, y = rating)) + geom_point() + labs(x = \"Votes\", y = \"Ratings\")\n\n\n\n\nTo be honest, I do not have an idea why the graph looks like that. Maybe only comment I can say that highly liked and hated movies unite society and increase the number of votes.\n\n\n\n\nggplot(movies_df, aes(x = duration, y = rating)) + geom_point() + labs(x = \"Duration (minutes)\", y = \"Rating\") \n\n\n\n\nIn that graph, we see that the distribution of movie durations is generally of a similar value. But I cannot say any relationship between rating and duration.\n\n\n\n\n\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\n\nurl_new &lt;- \"https://www.imdb.com/search/title/?groups=top_1000&country_of_origin=TR\" \n\ntitle_new &lt;- c()\nyear_new &lt;- c()\n\nfor (url in url_new) {\n  page &lt;- read_html(url)\n  \n  # To extract titles\n  title_names_new &lt;- page %&gt;% html_nodes('.ipc-title__text') %&gt;% html_text()\n  title_names_new &lt;- tail(head(title_names_new, -1), -1)\n  title_names_new &lt;- str_split(title_names_new, \" \", n = 2)\n  title_names_new &lt;- unlist(lapply(title_names_new, function(x) { x[2] }))\n  title_new &lt;- append(title_new, title_names_new)\n  \n  # To extract years\n  years_new &lt;- page %&gt;% html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata') %&gt;% html_text() %&gt;% str_extract(\"\\\\d{4}\") %&gt;% as.numeric()\n  year_new &lt;- append(year_new, years_new)\n  \n}\n\nmovies_df_new &lt;- data.frame(title_new, year_new)\nmovies_df_new\n\n                   title_new year_new\n1   Yedinci Kogustaki Mucize     2019\n2                 Kis Uykusu     2014\n3      Nefes: Vatan Sagolsun     2009\n4  Ayla: The Daughter of War     2017\n5             Babam ve Oglum     2005\n6                Ahlat Agaci     2018\n7    Bir Zamanlar Anadolu'da     2011\n8                     Eskiya     1996\n9                   G.O.R.A.     2004\n10                 Vizontele     2001\n11  Her Sey Çok Güzel Olacak     1998\n\n\n\n\n\nlibrary(dplyr)\nresult_df &lt;- left_join(movies_df_new, movies_df, by = c(\"title_new\" = \"title\"))\nprint(result_df)\n\n                   title_new year_new year duration rating  vote\n1   Yedinci Kogustaki Mucize     2019 2019      132    8.2 54171\n2                 Kis Uykusu     2014 2014      196    8.0 54646\n3      Nefes: Vatan Sagolsun     2009 2009      128    8.0 35022\n4  Ayla: The Daughter of War     2017 2017      125    8.3 42992\n5             Babam ve Oglum     2005 2005      108    8.2 91035\n6                Ahlat Agaci     2018 2018      188    8.0 27015\n7    Bir Zamanlar Anadolu'da     2011 2011      157    7.8 49365\n8                     Eskiya     1996 1996      128    8.1 71704\n9                   G.O.R.A.     2004 2004      127    8.0 66033\n10                 Vizontele     2001 2001      110    8.0 38403\n11  Her Sey Çok Güzel Olacak     1998 1998      107    8.1 27122\n\n\n\n\n\n\nlibrary(dplyr)\nranked_movies_joined &lt;- result_df %&gt;% arrange(desc(rating)) %&gt;% head(11)\nprint(ranked_movies_joined)\n\n                   title_new year_new year duration rating  vote\n1  Ayla: The Daughter of War     2017 2017      125    8.3 42992\n2   Yedinci Kogustaki Mucize     2019 2019      132    8.2 54171\n3             Babam ve Oglum     2005 2005      108    8.2 91035\n4                     Eskiya     1996 1996      128    8.1 71704\n5   Her Sey Çok Güzel Olacak     1998 1998      107    8.1 27122\n6                 Kis Uykusu     2014 2014      196    8.0 54646\n7      Nefes: Vatan Sagolsun     2009 2009      128    8.0 35022\n8                Ahlat Agaci     2018 2018      188    8.0 27015\n9                   G.O.R.A.     2004 2004      127    8.0 66033\n10                 Vizontele     2001 2001      110    8.0 38403\n11   Bir Zamanlar Anadolu'da     2011 2011      157    7.8 49365\n\n\nAnd our ranked initial data frame;\n\nlibrary(dplyr)\nranked_movies_initial &lt;- movies_df %&gt;% arrange(desc(rating)) %&gt;% head(11)\nprint(ranked_movies_initial)\n\n                          title year duration rating  vote\n1                Hababam Sinifi 1975       87    9.2 42512\n2        CM101MMXI Fundamentals 2013      139    9.1 46996\n3                    Tosun Pasa 1976       90    8.9 24329\n4  Hababam Sinifi Sinifta Kaldi 1975       95    8.9 24369\n5                 Süt Kardesler 1976       80    8.8 20889\n6              Saban Oglu Saban 1977       90    8.7 18534\n7                    Zügürt Aga 1985      101    8.7 16135\n8                 Neseli Günler 1978       95    8.7 11807\n9                   Kibar Feyzo 1978       83    8.7 17126\n10      Hababam Sinifi Uyaniyor 1976       94    8.7 20640\n11               Canim Kardesim 1973       85    8.6 10097\n\n\n\n\n\n\nIn some parts of my codelines, I got help from AI and several websites. To explain them, to use use stringr package I reviewed some websites to learn which functions it have, and how I can use them. Finally, with AI I gave my codelines to ChatGPT and Bing Copilot, and asked for help on how to combine them (For example: Duration operations, and using stringr package functions to do string processing in that codelines)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "B.S., Industrial Engineering, Hacettepe University, Turkey, 2020 - ongoing."
  },
  {
    "objectID": "about.html#employements",
    "href": "about.html#employements",
    "title": "About Me",
    "section": "Employements",
    "text": "Employements\n\nFirm xxx, position xx, year xxx\nFirm yyy, position yyy, year yyy"
  },
  {
    "objectID": "about.html#internships",
    "href": "about.html#internships",
    "title": "About Me",
    "section": "Internships",
    "text": "Internships\n\nIntertech, Business Analyst, July/2023-September/2023\nSelnikel, Production Planning and Material Managemenet/Project Management Intern, July/2023"
  },
  {
    "objectID": "assignments/assignment-1.html",
    "href": "assignments/assignment-1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "My first assignment has three parts."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "My Assignments",
    "section": "",
    "text": "On this page, I showcase the assignment I conducted for the [term and year, e.g. Fall 2023] EMU 430 Data Analytics course.\nPlease use left menu to navigate through my assignments.\nThe most recent update to this page was made on October 25, 2023\n\n\n\n Back to top"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "My Blog",
    "section": "",
    "text": "This page is under construction.\n\n\n\n Back to top"
  },
  {
    "objectID": "assignments/assignment-1.html#b-differences-betwwen-r-and-python",
    "href": "assignments/assignment-1.html#b-differences-betwwen-r-and-python",
    "title": "Assignment 1",
    "section": "",
    "text": "One of the main difference between these two popular languages is indexing the elements. R uses 1 as base index number, but in python indexing starts with 0.\nFor example:\n\n# In R\na &lt;- c(4, 5, 6, 7)\nfirst_a &lt;- a[1]\nsecond_a &lt;- a[2]\nprint(first_a)\n\n[1] 4\n\nprint(second_a)\n\n[1] 5\n\n\n\n# In Python\nb = [4, 5, 6, 7]\nfirst_b = b[0]\nsecond_b = b[1]\nprint(first_b)\n\n4\n\nprint(second_b)\n\n5"
  },
  {
    "objectID": "assignments/assignment-1.html#b-differences-between-r-and-python",
    "href": "assignments/assignment-1.html#b-differences-between-r-and-python",
    "title": "Assignment 1",
    "section": "b) Differences between R and Python",
    "text": "b) Differences between R and Python\n\nIndexing Elements\nOne of the main difference between these two popular languages is indexing the elements. R uses 1 as base index number, but in python indexing starts with 0.\nFor example:\n\n# In R\na &lt;- c(4, 5, 6, 7)\nfirst_a &lt;- a[1]\nsecond_a &lt;- a[2]\nprint(first_a)\n\n[1] 4\n\nprint(second_a)\n\n[1] 5\n\n\n\n# In Python\nb = [4, 5, 6, 7]\nfirst_b = b[0]\nsecond_b = b[1]\nprint(first_b)\n\n4\n\nprint(second_b)\n\n5"
  },
  {
    "objectID": "assignments/assignment-1.html#syntax-differences",
    "href": "assignments/assignment-1.html#syntax-differences",
    "title": "Assignment 1",
    "section": "Syntax Differences",
    "text": "Syntax Differences\nOne of the other difference is syntax. For example, to assign an element in R we use “&lt;-” but, in Python it is “=”.\n\na &lt;- 1\nb &lt;- 2\nsummation &lt;- a + b\nprint(summation)\n\n[1] 3\n\n\n\nx = 2 \ny = 3\nsummation = x + y\nprint(summation)\n\n5"
  },
  {
    "objectID": "assignments/assignment-1.html#creating-data-frame",
    "href": "assignments/assignment-1.html#creating-data-frame",
    "title": "Assignment 1",
    "section": "Creating Data Frame",
    "text": "Creating Data Frame\nR has special data structures like factors and data frames, but in python data structures differs like lists, dictionaries and pandas data frames.\n\nTurkish_cities &lt;- data.frame(\n                            city_name = c(\"Izmir\", \"Istanbul\", \"Ankara\"),\n                            city_population = c(\"4.300.000\", \"16.000.000\", \"5.700.000\")\n                            )\nprint(Turkish_cities)\n\n  city_name city_population\n1     Izmir       4.300.000\n2  Istanbul      16.000.000\n3    Ankara       5.700.000\n\n\n\nimport pandas as pd \nturkish_cities= [[\"Izmır\", \"4.300.000\"], [\"Istanbul\", \"16.000.000\"], [\"Ankara\", \"5.700.000\"]]\ndf_turkish_cities= pd.DataFrame(turkish_cities,columns= [\"city_name\", \"city_population\"])\nprint(df_turkish_cities)\n\n  city_name city_population\n0     Izmır       4.300.000\n1  Istanbul      16.000.000\n2    Ankara       5.700.000"
  },
  {
    "objectID": "assignments/assignment-1.html#c-na-values",
    "href": "assignments/assignment-1.html#c-na-values",
    "title": "Assignment 1",
    "section": "c) NA Values",
    "text": "c) NA Values\nOur main dataset with NA values is:\n\nlibrary(\"dslabs\")\ndata(na_example)\nprint(na_example)\n\n   [1]  2  1  3  2  1  3  1  4  3  2  2 NA  2  2  1  4 NA  1  1  2  1  2  2  1\n  [25]  2  5 NA  2  2  3  1  2  4  1  1  1  4  5  2  3  4  1  2  4  1  1  2  1\n  [49]  5 NA NA NA  1  1  5  1  3  1 NA  4  4  7  3  2 NA NA  1 NA  4  1  2  2\n  [73]  3  2  1  2  2  4  3  4  2  3  1  3  2  1  1  1  3  1 NA  3  1  2  2  1\n  [97]  2  2  1  1  4  1  1  2  3  3  2  2  3  3  3  4  1  1  1  2 NA  4  3  4\n [121]  3  1  2  1 NA NA NA NA  1  5  1  2  1  3  5  3  2  2 NA NA NA NA  3  5\n [145]  3  1  1  4  2  4  3  3 NA  2  3  2  6 NA  1  1  2  2  1  3  1  1  5 NA\n [169] NA  2  4 NA  2  5  1  4  3  3 NA  4  3  1  4  1  1  3  1  1 NA NA  3  5\n [193]  2  2  2  3  1  2  2  3  2  1 NA  2 NA  1 NA NA  2  1  1 NA  3 NA  1  2\n [217]  2  1  3  2  2  1  1  2  3  1  1  1  4  3  4  2  2  1  4  1 NA  5  1  4\n [241] NA  3 NA NA  1  1  5  2  3  3  2  4 NA  3  2  5 NA  2  3  4  6  2  2  2\n [265] NA  2 NA  2 NA  3  3  2  2  4  3  1  4  2 NA  2  4 NA  6  2  3  1 NA  2\n [289]  2 NA  1  1  3  2  3  3  1 NA  1  4  2  1  1  3  2  1  2  3  1 NA  2  3\n [313]  3  2  1  2  3  5  5  1  2  3  3  1 NA NA  1  2  4 NA  2  1  1  1  3  2\n [337]  1  1  3  4 NA  1  2  1  1  3  3 NA  1  1  3  5  3  2  3  4  1  4  3  1\n [361] NA  2  1  2  2  1  2  2  6  1  2  4  5 NA  3  4  2  1  1  4  2  1  1  1\n [385]  1  2  1  4  4  1  3 NA  3  3 NA  2 NA  1  2  1  1  4  2  1  4  4 NA  1\n [409]  2 NA  3  2  2  2  1  4  3  6  1  2  3  1  3  2  2  2  1  1  3  2  1  1\n [433]  1  3  2  2 NA  4  4  4  1  1 NA  4  3 NA  1  3  1  3  2  4  2  2  2  3\n [457]  2  1  4  3 NA  1  4  3  1  3  2 NA  3 NA  1  3  1  4  1  1  1  2  4  3\n [481]  1  2  2  2  3  2  3  1  1 NA  3  2  1  1  2 NA  2  2  2  3  3  1  1  2\n [505] NA  1  2  1  1  3  3  1  3  1  1  1  1  1  2  5  1  1  2  2  1  1 NA  1\n [529]  4  1  2  4  1  3  2 NA  1  1 NA  2  1  1  4  2  3  3  1  5  3  1  1  2\n [553] NA  1  1  3  1  3  2  4 NA  2  3  2  1  2  1  1  1  2  2  3  1  5  2 NA\n [577]  2 NA  3  2  2  2  1  5  3  2  3  1 NA  3  1  2  2  2  1  2  2  4 NA  6\n [601]  1  2 NA  1  1  2  2  3 NA  3  2  3  3  4  2 NA  2 NA  4 NA  1  1  2  2\n [625]  3  1  1  1  3 NA  2  5 NA  7  1 NA  4  3  3  1 NA  1  1  1  1  3  2  4\n [649]  2  2  3 NA NA  1  4  3  2  2  2  3  2  4  2  2  4 NA NA NA  6  3  3  1\n [673]  4  4  2  1 NA  1  6 NA  3  3  2  1  1  6 NA  1  5  1 NA  2  6  2 NA  4\n [697]  1  3  1  2 NA  1  1  3  1  2  4  2  1  3  2  4  3  2  2  1  1  5  6  4\n [721]  2  2  2  2  4 NA  1  2  2  2  2  4  5 NA NA NA  4  3  3  3  2  4  2  4\n [745] NA NA NA NA  2  1 NA  2  4  3  2 NA  2  3  1  3  4 NA  1  2  1  2 NA  3\n [769]  1  2  1  2  1  2  1  2  2  2  2  1  1  3  3  1  3  4  3 NA NA  4  2  3\n [793]  2  1  3  2  4  2  2  3  1  2  4  3  3  4 NA  1  4  2  1  1  1  3  1  5\n [817]  2  2  4  2 NA  1  3  1  2 NA  1  2  1  2  1 NA  1  3  2  3  2 NA  2  1\n [841]  4  2 NA NA NA  2  4  2 NA NA  3  1 NA  5  5  2  2  2 NA  2  1  3  1  3\n [865]  2  4  2  4 NA  4  1  2  3  2  3  3  2  3  2  2  2  1  3  2  4  2 NA  3\n [889]  3  2  2 NA NA  3  2  1  2  4  1  1  1  1  4  3  2 NA  3  2 NA  1 NA  3\n [913]  2  1  1  1  2 NA  2  2  3  3  2 NA NA  4  5  2  2  2  1  2  3  1  3  3\n [937]  4  3 NA  1  1  1 NA  4  3  5  1  1  2 NA  2  2  2  2  5  2  2  3  1  2\n [961]  3 NA  1  2 NA NA  2 NA  3  1  1  2  5  3  5  1  1  4 NA  2  1  3  1  1\n [985]  2  4  3  3  3 NA  1  1  2  2  1  1  2  2 NA  2\n\n\nand the number of NA values is:\n\nlibrary(\"dslabs\")\ndata(na_example)\ntotal_NA_Value &lt;- sum(is.na(na_example))\nprint(total_NA_Value)\n\n[1] 145\n\n\nOur new dataset without NA values is:\n\nlibrary(\"dslabs\")\ndata(\"na_example\")\nnon_NA_Dataframe &lt;- na_example\nnon_NA_Dataframe[is.na(na_example)] &lt;- 0\nprint(non_NA_Dataframe)\n\n   [1] 2 1 3 2 1 3 1 4 3 2 2 0 2 2 1 4 0 1 1 2 1 2 2 1 2 5 0 2 2 3 1 2 4 1 1 1 4\n  [38] 5 2 3 4 1 2 4 1 1 2 1 5 0 0 0 1 1 5 1 3 1 0 4 4 7 3 2 0 0 1 0 4 1 2 2 3 2\n  [75] 1 2 2 4 3 4 2 3 1 3 2 1 1 1 3 1 0 3 1 2 2 1 2 2 1 1 4 1 1 2 3 3 2 2 3 3 3\n [112] 4 1 1 1 2 0 4 3 4 3 1 2 1 0 0 0 0 1 5 1 2 1 3 5 3 2 2 0 0 0 0 3 5 3 1 1 4\n [149] 2 4 3 3 0 2 3 2 6 0 1 1 2 2 1 3 1 1 5 0 0 2 4 0 2 5 1 4 3 3 0 4 3 1 4 1 1\n [186] 3 1 1 0 0 3 5 2 2 2 3 1 2 2 3 2 1 0 2 0 1 0 0 2 1 1 0 3 0 1 2 2 1 3 2 2 1\n [223] 1 2 3 1 1 1 4 3 4 2 2 1 4 1 0 5 1 4 0 3 0 0 1 1 5 2 3 3 2 4 0 3 2 5 0 2 3\n [260] 4 6 2 2 2 0 2 0 2 0 3 3 2 2 4 3 1 4 2 0 2 4 0 6 2 3 1 0 2 2 0 1 1 3 2 3 3\n [297] 1 0 1 4 2 1 1 3 2 1 2 3 1 0 2 3 3 2 1 2 3 5 5 1 2 3 3 1 0 0 1 2 4 0 2 1 1\n [334] 1 3 2 1 1 3 4 0 1 2 1 1 3 3 0 1 1 3 5 3 2 3 4 1 4 3 1 0 2 1 2 2 1 2 2 6 1\n [371] 2 4 5 0 3 4 2 1 1 4 2 1 1 1 1 2 1 4 4 1 3 0 3 3 0 2 0 1 2 1 1 4 2 1 4 4 0\n [408] 1 2 0 3 2 2 2 1 4 3 6 1 2 3 1 3 2 2 2 1 1 3 2 1 1 1 3 2 2 0 4 4 4 1 1 0 4\n [445] 3 0 1 3 1 3 2 4 2 2 2 3 2 1 4 3 0 1 4 3 1 3 2 0 3 0 1 3 1 4 1 1 1 2 4 3 1\n [482] 2 2 2 3 2 3 1 1 0 3 2 1 1 2 0 2 2 2 3 3 1 1 2 0 1 2 1 1 3 3 1 3 1 1 1 1 1\n [519] 2 5 1 1 2 2 1 1 0 1 4 1 2 4 1 3 2 0 1 1 0 2 1 1 4 2 3 3 1 5 3 1 1 2 0 1 1\n [556] 3 1 3 2 4 0 2 3 2 1 2 1 1 1 2 2 3 1 5 2 0 2 0 3 2 2 2 1 5 3 2 3 1 0 3 1 2\n [593] 2 2 1 2 2 4 0 6 1 2 0 1 1 2 2 3 0 3 2 3 3 4 2 0 2 0 4 0 1 1 2 2 3 1 1 1 3\n [630] 0 2 5 0 7 1 0 4 3 3 1 0 1 1 1 1 3 2 4 2 2 3 0 0 1 4 3 2 2 2 3 2 4 2 2 4 0\n [667] 0 0 6 3 3 1 4 4 2 1 0 1 6 0 3 3 2 1 1 6 0 1 5 1 0 2 6 2 0 4 1 3 1 2 0 1 1\n [704] 3 1 2 4 2 1 3 2 4 3 2 2 1 1 5 6 4 2 2 2 2 4 0 1 2 2 2 2 4 5 0 0 0 4 3 3 3\n [741] 2 4 2 4 0 0 0 0 2 1 0 2 4 3 2 0 2 3 1 3 4 0 1 2 1 2 0 3 1 2 1 2 1 2 1 2 2\n [778] 2 2 1 1 3 3 1 3 4 3 0 0 4 2 3 2 1 3 2 4 2 2 3 1 2 4 3 3 4 0 1 4 2 1 1 1 3\n [815] 1 5 2 2 4 2 0 1 3 1 2 0 1 2 1 2 1 0 1 3 2 3 2 0 2 1 4 2 0 0 0 2 4 2 0 0 3\n [852] 1 0 5 5 2 2 2 0 2 1 3 1 3 2 4 2 4 0 4 1 2 3 2 3 3 2 3 2 2 2 1 3 2 4 2 0 3\n [889] 3 2 2 0 0 3 2 1 2 4 1 1 1 1 4 3 2 0 3 2 0 1 0 3 2 1 1 1 2 0 2 2 3 3 2 0 0\n [926] 4 5 2 2 2 1 2 3 1 3 3 4 3 0 1 1 1 0 4 3 5 1 1 2 0 2 2 2 2 5 2 2 3 1 2 3 0\n [963] 1 2 0 0 2 0 3 1 1 2 5 3 5 1 1 4 0 2 1 3 1 1 2 4 3 3 3 0 1 1 2 2 1 1 2 2 0\n[1000] 2\n\n\nand the number of NA values is:\n\nlibrary(\"dslabs\")\ndata(\"na_example\")\nnon_NA_Dataframe &lt;- na_example\nnon_NA_Dataframe[is.na(na_example)] &lt;- 0\ntotal_NA_Value &lt;- sum(is.na(non_NA_Dataframe))\nprint(total_NA_Value)\n\n[1] 0"
  },
  {
    "objectID": "assignments/assignment-1.html#a-discussion-on-quarto-for-the-curious",
    "href": "assignments/assignment-1.html#a-discussion-on-quarto-for-the-curious",
    "title": "Assignment 1",
    "section": "a) Discussion on “Quarto for the Curious”",
    "text": "a) Discussion on “Quarto for the Curious”\nThe video discusses Quarto. Quarto is a next-generation version of RMarkdown which built on Pandoc. It is a powerful scientific and technical publishing system that allows users to render documents to HTML, PDF, or websites. It extends beyond R to include Jupyter and Jupyter Kernels, allowing for collaboration with other programming languages. Quarto is included in RStudio which makes it easier for users to access and begin using it. It also supports Jupyter and Jupyter Kernels, that allows interaction with other programming languages. Quarto is included in RStudio which makes it easier for users to access and use it.\nThe speaker discusses the advantages of use Quarto for writing different kinds of documents such as books, blogs, and webpages. Quarto also comes with a variety of formats and advanced layouts like distill. Users may continue working on shared documents in the comfort of their own workstation.\nQuarto also can works with JavaScript libraries that add interactivity to R documents. It combines the syntax of several formats like HTML, PDF, R, Markdown etc. Also with Quarto, users can create and interact with different tags, filter data, and generate documents in various formats without install another software.\nFinally, the speaker talks about how Quarto was developed and how it relates to RMarkdown. Quarto is a new platform which was created by same team with RMarkdown. The fact that RMarkdown will continue, but new features will be built into Quarto."
  },
  {
    "objectID": "assignments/assignment-2.html#extracting-url",
    "href": "assignments/assignment-2.html#extracting-url",
    "title": "Assignment 2",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(stringr)\nlibrary(rvest)\n\n\nAttaching package: 'rvest'\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\nurl_1 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\" \nurl_2 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nsum_url &lt;- c(url_1, url_2)"
  },
  {
    "objectID": "assignments/assignment-2.html#web-scraping-of-movies-from-urls",
    "href": "assignments/assignment-2.html#web-scraping-of-movies-from-urls",
    "title": "Assignment 2",
    "section": "",
    "text": "library(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\n\nurl_1 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-12-31&num_votes=2500,&country_of_origin=TR&count=250\" \nurl_2 &lt;- \"https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250\"\nsum_url &lt;- c(url_1, url_2)\n\ntitle &lt;- c()\nyear &lt;- c()\nduration &lt;- c()\nrating &lt;- c()\nvote &lt;- c()\n\nfor (url in sum_url) {\n  page &lt;- read_html(url)\n  \n  # To extract names\n  title_names &lt;- page %&gt;% html_nodes('.ipc-title__text') %&gt;% html_text()\n  title_names &lt;- tail(head(title_names, -1), -1)\n  title_names &lt;- str_split(title_names, \" \", n = 2)\n  title_names &lt;- unlist(lapply(title_names, function(x) { x[2] }))\n  title &lt;- append(title, title_names)\n  \n  # To extract years\n  years &lt;- page %&gt;% html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata') %&gt;% html_text() %&gt;% str_extract(\"\\\\d{4}\") %&gt;% as.numeric()\n  year &lt;- append(year, years)\n  \n  # To convert durations \n  convert_duration_to_minutes &lt;- function(duration_string) {\n    \n    hours &lt;- as.numeric(str_extract(duration_string, \"\\\\d+\\\\s?h\"))\n    minutes &lt;- as.numeric(str_extract(duration_string, \"\\\\d+\\\\s?m\"))\n    seconds &lt;- as.numeric(str_extract(duration_string, \"\\\\d+\\\\s?s\"))\n    \n    \n    hours &lt;- ifelse(is.na(hours), 0, hours)\n    minutes &lt;- ifelse(is.na(minutes), 0, minutes)\n    seconds &lt;- ifelse(is.na(seconds), 0, seconds)\n    \n    \n    total_minutes &lt;- hours * 60 + minutes + seconds / 60\n    \n    return(total_minutes)\n  }\n  # To extract durations\n  durations &lt;- page %&gt;% html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata') %&gt;% html_text()\n  \n  convert_to_minutes &lt;- function(duration) {\n    hours &lt;- as.numeric(str_extract(duration, \"\\\\d+(?=h)\"))\n    minutes &lt;- as.numeric(str_extract(duration, \"\\\\d+(?=m)\"))\n    \n    \n    hours &lt;- ifelse(is.na(hours), 0, hours)\n    minutes &lt;- ifelse(is.na(minutes), 0, minutes)\n    \n    total_minutes &lt;- hours * 60 + minutes\n    return(total_minutes)\n  }\n  \n  durations_in_minutes &lt;- lapply(durations, function(d) {\n    d &lt;- str_extract(d, \"\\\\d+h( \\\\d+m)?|\\\\d+m|\\\\d+\") %&gt;% str_extract(\"(?&lt;=^.{4}).*\")\n    convert_to_minutes(d)\n  })\n  \n  durations &lt;- unlist(durations_in_minutes)\n  duration &lt;- append(duration, durations)\n  \n  # To extract ratings\n  ratings &lt;- page %&gt;% html_nodes(\".sc-43986a27-1.fVmjht\") %&gt;% html_text() %&gt;% str_sub(1, 3) %&gt;% as.numeric()\n  rating &lt;- append(rating, ratings)\n  \n  # To extract votes\n  votes &lt;- page %&gt;% html_nodes(\".sc-53c98e73-0.kRnqtn\") %&gt;% html_text() %&gt;% str_extract_all(\"\\\\d+\") %&gt;% sapply(function(x) as.numeric(paste(x, collapse = \"\")))\n  vote &lt;- append(vote, votes)\n  \n}\n\nmovies_df &lt;- data.frame(title, year, duration, rating, vote)\nhead(movies_df)\n\n                     title year duration rating  vote\n1        Kuru Otlar Üstüne 2023      197    8.1  5088\n2  Istanbul Için Son Çagri 2023       91    5.3  7393\n3 Yedinci Kogustaki Mucize 2019      132    8.2 54171\n4           Ölümlü Dünya 2 2023      117    7.5  3484\n5                   Bihter 2023      113    3.6  3356\n6             Ölümlü Dünya 2018      107    7.6 30270"
  },
  {
    "objectID": "assignments/assignment-2.html#analysis-on-dataset",
    "href": "assignments/assignment-2.html#analysis-on-dataset",
    "title": "Assignment 2",
    "section": "",
    "text": "movies_df &lt;- movies_df[order(-movies_df$rating), ]\nbest_5_movies &lt;- head(movies_df, 5)\nprint(\"Best 5 Movies:\")\n\n[1] \"Best 5 Movies:\"\n\nprint(best_5_movies)\n\n                           title year duration rating  vote\n257               Hababam Sinifi 1975       87    9.2 42512\n39        CM101MMXI Fundamentals 2013      139    9.1 46996\n273                   Tosun Pasa 1976       90    8.9 24329\n337 Hababam Sinifi Sinifta Kaldi 1975       95    8.9 24369\n321                Süt Kardesler 1976       80    8.8 20889\n\n\nI think it would be disrespectful to criticize that movies. Each of them starred cult actors and actresses who have contributed to Turkish cinema for years. Maybe the only comment we can make is the type of second “movie”. As you know, it’s not a movie, it’s recorded stand-up show, but of course it does not doesn’t change the fact that it is one of the best examples of its kind.\n\nmovies_df &lt;- movies_df[order(-movies_df$rating), ]\nworst_5_movies &lt;- tail(movies_df, 5)\nprint(\"Worst 5 Movies:\")\n\n[1] \"Worst 5 Movies:\"\n\nprint(worst_5_movies)\n\n                             title year duration rating  vote\n189                 Cumali Ceber 2 2018      100    1.2 10230\n199                          Müjde 2022       48    1.2  9919\n245              15/07 Safak Vakti 2021       95    1.2 20608\n101 Cumali Ceber: Allah Seni Alsin 2017      100    1.0 39269\n150                           Reis 2017      108    1.0 73974\n\n\nActually, I do not have a specific comment for that movies. Especially for some of them. I don’t want to get in trouble :D\n\nmovies_df %&gt;% filter(title == \"Aile Arasinda\" | title == \"Babam ve Oglum\" | title == \"G.O.R.A.\" | title == \"Pek Yakinda\" | title == \"Beyaz Melek\") %&gt;% arrange(desc(rating))\n\n           title year duration rating  vote\n1 Babam ve Oglum 2005      108    8.2 91035\n2       G.O.R.A. 2004      127    8.0 66033\n3  Aile Arasinda 2017      124    7.6 25666\n4    Pek Yakinda 2014      134    7.3 35455\n5    Beyaz Melek 2007      115    6.5  7338\n\n\nSince I had to choose 5 movies, these are the first ones that come to my mind. I cannot say that they’re my favorites. To comment: Babam ve Oglum is a really emotional movie, as you know. I cryevery time I watched it, especially in one scene. You know that scene… If I need to comment about the Aile Arasinda: As a person who watched everything produced by Gulse Birsel, it is a comedy movie that I love very much. Finally, Beyaz Melek is a movie I watched in my childhood and I think a child should not watch it. It can cause a kind of trauma. Fortunatelly, it didn’t happen to me.\n\n\n\nmovie_count_by_year &lt;- movies_df %&gt;%\n  group_by(year) %&gt;%\n  summarise(count = n())\n\nggplot(movie_count_by_year, aes(x = year, y = count)) + geom_point(size = 1) + labs(title = \"Number of Movies by Year\", x = \"Year\", y = \"Number of Movies\") \n\n\n\n\nAs you can see, number of movies produces significantly increased in last 20 years. Some of the reasons for this may be competition in the sector, digitalization and globalization in the media.\n\n\n\n\nratings_by_year &lt;- movies_df %&gt;% group_by(year) %&gt;% summarise(average_rating = mean(rating))\n\nggplot(ratings_by_year, aes(x = year, y = average_rating)) + geom_point(size = 1) + labs(title = \"Average Ratings by Year\", x = \"Year\", y = \"Average Rating\")\n\n\n\n\nAs you can see, we are facing with an interesting result. I just mentioned that the number of movies by years increased, and we talked about some reasons for that. In this graph, we also can see some results of that reasons. The increasing number of movies have clearly reduced the ratings.\n\n\n\n\nggplot(movies_df, aes(x = vote, y = rating)) + geom_point() + labs(x = \"Votes\", y = \"Ratings\")\n\n\n\n\nTo be honest, I do not have an idea why the graph looks like that. Maybe only comment I can say that highly liked and hated movies unite society and increase the number of votes.\n\n\n\n\nggplot(movies_df, aes(x = duration, y = rating)) + geom_point() + labs(x = \"Duration (minutes)\", y = \"Rating\") \n\n\n\n\nIn that graph, we see that the distribution of movie durations is generally of a similar value. But I cannot say any relationship between rating and duration."
  },
  {
    "objectID": "assignments/assignment-2.html#different-analysis",
    "href": "assignments/assignment-2.html#different-analysis",
    "title": "Assignment 2",
    "section": "",
    "text": "library(tidyverse)\nlibrary(stringr)\nlibrary(rvest)\n\nurl_new &lt;- \"https://www.imdb.com/search/title/?groups=top_1000&country_of_origin=TR\" \n\ntitle_new &lt;- c()\nyear_new &lt;- c()\n\nfor (url in url_new) {\n  page &lt;- read_html(url)\n  \n  # To extract titles\n  title_names_new &lt;- page %&gt;% html_nodes('.ipc-title__text') %&gt;% html_text()\n  title_names_new &lt;- tail(head(title_names_new, -1), -1)\n  title_names_new &lt;- str_split(title_names_new, \" \", n = 2)\n  title_names_new &lt;- unlist(lapply(title_names_new, function(x) { x[2] }))\n  title_new &lt;- append(title_new, title_names_new)\n  \n  # To extract years\n  years_new &lt;- page %&gt;% html_nodes('.sc-43986a27-7.dBkaPT.dli-title-metadata') %&gt;% html_text() %&gt;% str_extract(\"\\\\d{4}\") %&gt;% as.numeric()\n  year_new &lt;- append(year_new, years_new)\n  \n}\n\nmovies_df_new &lt;- data.frame(title_new, year_new)\nmovies_df_new\n\n                   title_new year_new\n1   Yedinci Kogustaki Mucize     2019\n2                 Kis Uykusu     2014\n3      Nefes: Vatan Sagolsun     2009\n4  Ayla: The Daughter of War     2017\n5             Babam ve Oglum     2005\n6                Ahlat Agaci     2018\n7    Bir Zamanlar Anadolu'da     2011\n8                     Eskiya     1996\n9                   G.O.R.A.     2004\n10                 Vizontele     2001\n11  Her Sey Çok Güzel Olacak     1998\n\n\n\n\n\nlibrary(dplyr)\nresult_df &lt;- left_join(movies_df_new, movies_df, by = c(\"title_new\" = \"title\"))\nprint(result_df)\n\n                   title_new year_new year duration rating  vote\n1   Yedinci Kogustaki Mucize     2019 2019      132    8.2 54171\n2                 Kis Uykusu     2014 2014      196    8.0 54646\n3      Nefes: Vatan Sagolsun     2009 2009      128    8.0 35022\n4  Ayla: The Daughter of War     2017 2017      125    8.3 42992\n5             Babam ve Oglum     2005 2005      108    8.2 91035\n6                Ahlat Agaci     2018 2018      188    8.0 27015\n7    Bir Zamanlar Anadolu'da     2011 2011      157    7.8 49365\n8                     Eskiya     1996 1996      128    8.1 71704\n9                   G.O.R.A.     2004 2004      127    8.0 66033\n10                 Vizontele     2001 2001      110    8.0 38403\n11  Her Sey Çok Güzel Olacak     1998 1998      107    8.1 27122\n\n\n\n\n\n\nlibrary(dplyr)\nranked_movies_joined &lt;- result_df %&gt;% arrange(desc(rating)) %&gt;% head(11)\nprint(ranked_movies_joined)\n\n                   title_new year_new year duration rating  vote\n1  Ayla: The Daughter of War     2017 2017      125    8.3 42992\n2   Yedinci Kogustaki Mucize     2019 2019      132    8.2 54171\n3             Babam ve Oglum     2005 2005      108    8.2 91035\n4                     Eskiya     1996 1996      128    8.1 71704\n5   Her Sey Çok Güzel Olacak     1998 1998      107    8.1 27122\n6                 Kis Uykusu     2014 2014      196    8.0 54646\n7      Nefes: Vatan Sagolsun     2009 2009      128    8.0 35022\n8                Ahlat Agaci     2018 2018      188    8.0 27015\n9                   G.O.R.A.     2004 2004      127    8.0 66033\n10                 Vizontele     2001 2001      110    8.0 38403\n11   Bir Zamanlar Anadolu'da     2011 2011      157    7.8 49365\n\n\nAnd our ranked initial data frame;\n\nlibrary(dplyr)\nranked_movies_initial &lt;- movies_df %&gt;% arrange(desc(rating)) %&gt;% head(11)\nprint(ranked_movies_initial)\n\n                          title year duration rating  vote\n1                Hababam Sinifi 1975       87    9.2 42512\n2        CM101MMXI Fundamentals 2013      139    9.1 46996\n3                    Tosun Pasa 1976       90    8.9 24329\n4  Hababam Sinifi Sinifta Kaldi 1975       95    8.9 24369\n5                 Süt Kardesler 1976       80    8.8 20889\n6              Saban Oglu Saban 1977       90    8.7 18534\n7                    Zügürt Aga 1985      101    8.7 16135\n8                 Neseli Günler 1978       95    8.7 11807\n9                   Kibar Feyzo 1978       83    8.7 17126\n10      Hababam Sinifi Uyaniyor 1976       94    8.7 20640\n11               Canim Kardesim 1973       85    8.6 10097"
  },
  {
    "objectID": "assignments/assignment-2.html#references",
    "href": "assignments/assignment-2.html#references",
    "title": "Assignment 2",
    "section": "",
    "text": "In some parts of my codelines, I got help from AI and several websites. To explain them, to use use stringr package I reviewed some websites to learn which functions it have, and how I can use them. Finally, with AI I gave my codelines to ChatGPT and Bing Copilot, and asked for help on how to combine them (For example: Duration operations, and using stringr package functions to do string processing in that codelines)."
  }
]